const fs = require('fs');
const path = require('path');
const express = require('express');
const archiver = require('archiver');
const app = express();

// ÈÖçÁΩÆ‰∏ãËΩΩÁõÆÂΩïÔºàÈªòËÆ§‰∏∫ÂΩìÂâçÁõÆÂΩï‰∏ãÁöÑdownloadsÊñá‰ª∂Â§πÔºâ
const DOWNLOAD_DIR = path.join(__dirname, 'downloads');

// Á°Æ‰øù‰∏ãËΩΩÁõÆÂΩïÂ≠òÂú®
if (!fs.existsSync(DOWNLOAD_DIR)) {
  fs.mkdirSync(DOWNLOAD_DIR, { recursive: true });
}

// ‰∏ªÈ°µÔºöÊòæÁ§∫ÂèØ‰∏ãËΩΩÊñá‰ª∂
app.get('/', (req, res) => {
  fs.readdir(DOWNLOAD_DIR, (err, files) => {
    if (err) return res.status(500).send('ËØªÂèñÁõÆÂΩïÂ§±Ë¥•');
    
    if (files.length === 0) {
      return res.send(`
        <h1>file download</h1>
        <p>pathÔºö${DOWNLOAD_DIR}</p>
        <a href="/download-all">refresh</a>
      `);
    }

    // ÁîüÊàêÊñá‰ª∂ÂàóË°®HTML
    const fileList = files.map(file => {
      const filePath = path.join(DOWNLOAD_DIR, file);
      const stats = fs.statSync(filePath);
      const sizeMB = (stats.size / (1024 * 1024)).toFixed(2);
      return `
        <li>
          <a href="/download/${file}">${file}</a> 
          <span>(${sizeMB} MB)</span>
        </li>
      `;
    }).join('');
    
    res.send(`
      <!DOCTYPE html>
      <html lang="zh">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Download System</title>
        <style>
          * { box-sizing: border-box; font-family: system-ui, sans-serif; }
          body { max-width: 900px; margin: 0 auto; padding: 20px; }
          h1 { color: #333; border-bottom: 1px solid #eee; padding-bottom: 10px; }
          ul { list-style: none; padding: 0; }
          li { padding: 10px; border: 1px solid #eaeaea; margin-bottom: 10px; border-radius: 5px; }
          a { text-decoration: none; color: #1a73e8; font-size: 1.1em; }
          a:hover { text-decoration: underline; }
          .actions { display: flex; gap: 10px; margin: 20px 0; }
          button { 
            background: #1a73e8; 
            color: white; 
            border: none; 
            padding: 10px 15px; 
            border-radius: 5px; 
            cursor: pointer;
            font-size: 1em;
          }
          button:hover { background: #1557b0; }
          .footer { margin-top: 30px; color: #666; font-size: 0.9em; }
        </style>
      </head>
      <body>
        <h1>download</h1>
        <p>click file to download</p>
       
        <div><a href="https://learn.microsoft.com/en-us/java/openjdk/download">JDK</a><div>
        <h2>files: (${files.length}):</h2>
        <ul>${fileList}</ul>
        
        <div class="footer">
          <p>download path: ${DOWNLOAD_DIR}</p>
          <p>memory: ${(process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2)} MB</p>
        </div>
      </body>
      </html>
    `);
  });
});

// ‰∏ãËΩΩÂçï‰∏™Êñá‰ª∂
app.get('/download/:filename', (req, res) => {
  const filePath = path.join(DOWNLOAD_DIR, req.params.filename);
  
  if (fs.existsSync(filePath)) {
    const stats = fs.statSync(filePath);
    res.download(filePath, err => {
      if (err) console.error('‰∏ãËΩΩÂ§±Ë¥•:', err);
    });
  } else {
    res.status(404).send('Êñá‰ª∂‰∏çÂ≠òÂú®');
  }
});

// ‰∏ãËΩΩÊâÄÊúâÊñá‰ª∂ÔºàÊâìÂåÖ‰∏∫ZIPÔºâ
app.get('/download-all', (req, res) => {
  fs.readdir(DOWNLOAD_DIR, (err, files) => {
    if (err || files.length === 0) {
      return res.redirect('/');
    }
    
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const zipName = `download-${timestamp}.zip`;
    
    res.setHeader('Content-Type', 'application/zip');
    res.setHeader('Content-Disposition', `attachment; filename="${zipName}"`);
    
    const archive = archiver('zip', {
      zlib: { level: 9 } // ÊúÄÈ´òÂéãÁº©Áéá
    });
    
    archive.on('warning', err => {
      if (err.code !== 'ENOENT') console.warn('ÂΩíÊ°£Ë≠¶Âëä:', err);
    });
    
    archive.on('error', err => {
      console.error('ÂΩíÊ°£ÈîôËØØ:', err);
      res.status(500).send('ÂéãÁº©Êñá‰ª∂Êó∂Âá∫Èîô');
    });
    
    // Â∞ÜÊâÄÊúâÊñá‰ª∂Ê∑ªÂä†Âà∞ZIP
    files.forEach(file => {
      const filePath = path.join(DOWNLOAD_DIR, file);
      if (fs.existsSync(filePath)) {
        archive.file(filePath, { name: file });
      }
    });
    
    // ÂÆåÊàêÂéãÁº©ÂêéÁªìÊùüÂìçÂ∫î
    archive.finalize();
    
    // Â∞ÜZIPÊµÅÂºè‰º†ËæìÂà∞ÂìçÂ∫î
    archive.pipe(res);
  });
});

// ÂêØÂä®ÊúçÂä°Âô®
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`\n‚úÖ start file downloads`);
  console.log(`üìÇ dir: ${DOWNLOAD_DIR}`);
  console.log(`üëâ addr: http://localhost:${PORT}`);
  
  // Ê£ÄÊü•ÁõÆÂΩï‰∏≠ÁöÑÊñá‰ª∂
  fs.readdir(DOWNLOAD_DIR, (err, files) => {
    if (!err) {
      const fileCount = files.filter(name => 
        !name.startsWith('.') && 
        !fs.statSync(path.join(DOWNLOAD_DIR, name)).isDirectory()
      ).length;
      
      console.log(`üìù count: ${fileCount}`);
      
      if (fileCount > 0) {
        console.log('üîç files:');
        files.slice(0, 5).forEach(file => console.log(`   - ${file}`));
        if (fileCount > 5) console.log(`   ...ËøòÊúâ${fileCount - 5}‰∏™Êñá‰ª∂`);
      } else {
        console.log('‚ÑπÔ∏è  ÁõÆÂΩï‰∏∫Á©∫ÔºåËØ∑Ê∑ªÂä†Êñá‰ª∂ÂêéÂà∑Êñ∞È°µÈù¢');
        console.log(`   mkdir -p ${DOWNLOAD_DIR}`);
        console.log(`   touch ${DOWNLOAD_DIR}/example.txt`);
      }
    }
  });
});